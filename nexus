#!/usr/bin/env ruby

require 'escort'
require_relative 'lib/nexus'

Escort::App.create do |app|
    app.version Titon::Nexus::VERSION
    app.summary "Titon Nexus".green
    app.description "A Vagrant development environment with built-in project management.".yellow

    # Initialization
    app.command :init do |command|
        command.summary "Initialize Nexus".green
        command.description "Initialize the Nexus environment by creating all required configuration files.".yellow

        command.action do |options, arguments|
            Titon::Nexus::InitCommand.new(options, arguments).execute
        end
    end

    # Reload
    app.command :reload do |command|
        command.summary "Reload Nexus".green
        command.description "Reload the Nexus configuration by re-provisioning the Vagrant instance.".yellow

        command.action do |options, arguments|
            Titon::Nexus::ReloadCommand.new(options, arguments).execute
        end
    end

    # Export
    app.command :export do |command|
        command.summary "Export configuration".green
        command.description "Export the Nexus configuration to your home directory. ".yellow +
            "This allows configuration to be imported at a later time.\n\n".yellow +
            "Exporting configuration will overwrite any previously exported configuration!".yellow

        command.action do |options, arguments|
            Titon::Nexus::ExportCommand.new(options, arguments).execute
        end
    end

    # Import
    app.command :import do |command|
        command.summary "Import configuration".green
        command.description "Import any Nexus configuration from your home directory into this installation.\n\n".yellow +
            "Importing configuration will overwrite any previously defined configuration!".yellow

        command.action do |options, arguments|
            Titon::Nexus::ImportCommand.new(options, arguments).execute
        end
    end

    # Up
    app.command :up do |command|
        command.summary "Start Vagrant".green
        command.description "Start up the Vagrant instance.".yellow

        command.action do |options, arguments|
            Titon::Nexus::UpCommand.new(options, arguments).execute
        end
    end

    # Down
    app.command :down do |command|
        command.summary "Stop Vagrant".green
        command.description "Shutdown the Vagrant instance.".yellow

        command.action do |options, arguments|
            Titon::Nexus::DownCommand.new(options, arguments).execute
        end
    end

    # Project management
    app.command :project do |command|
        command.summary "Manage projects".green
        command.description "Manage projects by syncing Vagrant folders and creating nginx hosts.".yellow

        command.action do |options, arguments|
            puts `#{__FILE__} project --help`
        end

        # Add project
        command.command :add do |command|
            command.summary "Add a new project".green

            command.description "Add a new project by providing the source folder as the 1st argument,\n".yellow +
                "and an optional destination name as the 2nd argument. If no destination name is provided,\n".yellow +
                "the project will be synced into the Vagrant users home folder using the source base name.\n\n".yellow +

                "A unique nginx hostname can be provided using the `--hostname` option.\n".yellow +
                "If no hostname is provided, the base name of the source folder + '.app' will be used.\n\n".yellow +

                "If the root of the source folder is not the public webroot,\n".yellow +
                "a relative folder path can be provided using the `--webroot` option.".yellow

            command.options do |opts|
                opts.opt :hostname, "Hostname to use for nginx".green, :short => '-h', :long => '--hostname', :type => :string
                opts.opt :webroot, "A relative path to the webroot".green, :short => '-w', :long => '--webroot', :type => :string
            end

            command.action do |options, arguments|
                Titon::Nexus::ProjectAddCommand.new(options, arguments).execute
            end
        end

        # Delete project
        command.command :delete do |command|
            command.summary "Delete a project".green

            command.description "Delete an existing project by unsyncing the Vagrant destination folder,\n".yellow +
                "removing the nginx virtual host, and removing the YAML configuration.\n\n".yellow +

                "The hostname of the project to delete should be passed as the 1st argument.".yellow

            command.action do |options, arguments|
                Titon::Nexus::ProjectDeleteCommand.new(options, arguments).execute
            end
        end

        # List projects
        command.command :list do |command|
            command.summary "List projects".green

            command.description "List all projects that have been synced.".yellow

            command.action do |options, arguments|
                Titon::Nexus::ProjectListCommand.new(options, arguments).execute
            end
        end
    end

    # Environment variables
    app.command :var do |command|
        command.summary "Manage environment variables".green
        command.description "Manage environment variables passed to nginx.".yellow

        command.action do |options, arguments|
            puts `#{__FILE__} var --help`
        end

        # Add variable
        command.command :add do |command|
            command.summary "Add or update a variable".green

            command.description "Add or update an environment variable. The 1st argument is the key, and the 2nd argument is the value.".yellow

            command.action do |options, arguments|
                Titon::Nexus::VarAddCommand.new(options, arguments).execute
            end
        end

        # Delete variable
        command.command :delete do |command|
            command.summary "Delete variable".green

            command.description "Delete an environment variable defined by key. The key name should be passed as the 1st argument.".yellow

            command.action do |options, arguments|
                Titon::Nexus::VarDeleteCommand.new(options, arguments).execute
            end
        end

        # List variables
        command.command :list do |command|
            command.summary "List variables".green

            command.description "List all defined environment variables.".yellow

            command.action do |options, arguments|
                Titon::Nexus::VarListCommand.new(options, arguments).execute
            end
        end
    end

    # Databases
    app.command :db do |command|
        command.summary "Manage databases".green
        command.description "Manage the automatic creation of databases for MySQL and PostgreSQL.".yellow

        command.action do |options, arguments|
            puts `#{__FILE__} db --help`
        end

        # Add database
        command.command :add do |command|
            command.summary "Add database".green

            command.description "Add a new database that will be automatically created on the next Vagrant reload.\n".yellow +
                "The database name should be passed as the 1st argument.".yellow

            command.options do |opts|
                opts.opt :mysql, "Is MySQL".green, :short => '-m', :long => '--mysql', :type => :boolean, :default => false
                opts.opt :pgsql, "Is PostgreSQL".green, :short => '-p', :long => '--pgsql', :type => :boolean, :default => false
            end

            command.action do |options, arguments|
                Titon::Nexus::DbAddCommand.new(options, arguments).execute
            end
        end

        # Delete database
        command.command :delete do |command|
            command.summary "Delete database".green

            command.description "Delete a database from the configuration. This DOES NOT delete the actual database.\n".yellow +
                "The database name should be passed as the 1st argument.".yellow

            command.action do |options, arguments|
                Titon::Nexus::DbDeleteCommand.new(options, arguments).execute
            end
        end

        # List databases
        command.command :list do |command|
            command.summary "List databases".green

            command.description "List all configured databases.".yellow

            command.action do |options, arguments|
                Titon::Nexus::DbListCommand.new(options, arguments).execute
            end
        end
    end

    # Default action
    app.action do |options, arguments|
        puts `#{__FILE__} --help`
    end
end